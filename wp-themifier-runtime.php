<?php
/*
    Plugin Name: WP Themifier Runtime
    Plugin URI:  http://github.com/xemlock/wp-themifier-runtime
    Description: Runtime library for themes generated by WP Themifier.
    Version:     1.0-dev
    Author:      xemlock
    Author URI:  http://xemlock.pl/
    License:     GPL v2.0
    License URI: http://www.gnu.org/licenses/gpl-2.0.html
*/

/**
 * Get current language or language property.
 *
 * If Polylang plugin is active, its current language is returned, otherwise
 * a default language (English) is returned.
 *
 * @param  string $property OPTIONAL
 * @return object|string
 */
function themifier_get_language($property = null) // {{{
{
    static $fallback_language;
    global $polylang;

    if ($polylang) {
        $language = $polylang->curlang;
    }

    if (empty($language)) {
        if (empty($fallback_language)) {
            // wp-admin path is hardcoded in wp-includes/l10n.php so we don't
            // really if it's the proper way of including files from admin dir
            require_once ABSPATH . 'wp-admin/includes/translation-install.php';
            $translations = wp_get_available_translations();

            $locale = get_locale();
            $code = themifier_lang_code($locale);

            // try to obtain language data, first check using locale, then
            // using language code derived from locale. If that fails fall
            // back to English (en_US)
            if (isset($translation[$locale])) {
                $data = $translations[$locale];

            } elseif (isset($translations[$code])) {
                $data = $translations[$code];

            } else {
                $data = array(
                    'language'    => 'en_US',
                    'native_name' => 'English',
                );
            }

            $fallback_language = (object) array(
                'name'       => $data['native_name'],
                'locale'     => $data['language'],
                'slug'       => get_lang_code($data['language']),
                'home_url'   => home_url(),
                'search_url' => home_url(),
            );
        }
        $language = $fallback_language;
    }

    if (null === $property) {
        return $language;
    }

    return $language->{$property};
} // }}}

/**
 * Get available languages.
 *
 * Returned array of languages is non-empty. If no language is specified
 * default language (English) will be used.
 *
 * @return array
 */
function themifier_get_languages() // {{{
{
    global $polylang;

    if ($polylang) {
        $languages = $polylang->model->get_languages_list();
        return $languages;
    }

    return array(themifier_get_language());
} // }}}

/**
 * Get two letter language code of a given or, if no language provided,
 * current language.
 *
 * If no language code can be determined, a default value 'en' will be
 * returned.
 *
 * @param object|string $lang
 * @return string
 */
function themifier_lang_code($lang = null) // {{{
{
    if (null === $lang) {
        $lang = themifier_get_language();
    }

    if (is_object($lang)) {
        $locale = $lang->locale;
    } else {
        $locale = (string) $lang;
    }

    return substr($locale, 0, 2);
} // }}}

/**
 * Inserts language code as a GET param in the given URL.
 *
 * @param  string $url
 * @param  string $slug
 * @return string
 */
function themifier_url_insert_lang($url, $slug) // {{{
{
    // make sure no URL parts interferes with sprintf format
    $url = str_replace(array('%s', '%S'), array('%25s', '%25S'), $url);
    $url = preg_replace('/([?&])lang=[a-z]+/i', '\1lang=%s', $url, -1, $count);
    if (0 === $count) {
        $url .= false === strpos($url, '?')
            ? '?lang=%s'
            : '&lang=%s';
    }
    return sprintf($url, $slug);
} // }}}

/**
 * Get home URL for a given language.
 *
 * @param  string $slug OPTIONAL
 * @return string
 */
function themifier_home_url($slug = null) // {{{
{
    if (function_exists('pll_home_url')) {
        return pll_home_url($slug);
    }

    $url = get_home_url();

    if (null !== $slug) {
        $url = themifier_url_insert_lang($url, $slug);
    }

    return $url;
} // }}}

/**
 * Get post language.
 *
 * @param  int $post_id OPTIONAL
 * @return object|null
 */
function themifier_get_post_language($post_id = null) // {{{
{
    global $polylang;

    if ($polylang) {
        // well... this should be a public feature of Polylang
        $language = $polylang->model->get_post_language($post_id);
    }

    return empty($language) ? null : $language;
} // }}}

/**
 * Get term language.
 *
 * @param  int $term_id OPTIONAL
 * @return object|null
 */
function themifier_get_term_language($term_id = null) // {{{
{
    global $polylang;

    if ($polylang) {
        // well... this should be a public feature of Polylang
        $language = $polylang->model->get_term_language($term_id);
    }

    return empty($language) ? null : $language;
} // }}}

/**
 * Get transation URL for the given language of the current site.
 *
 * @param  $slug OPTIONAL
 * @return string
 */
function themifier_get_translation_url($slug = null) // {{{
{
    global $post, $polylang;

    if (null === $slug) {
        $slug = themifier_get_language('slug');
    }

    switch (true) {
        case is_single():
        case is_page():
            $translation_id = themifier_get_translation_id('post', $post->ID, $slug);
            if ($translation_id) {
                $url = get_permalink($translation_id);
            }
            break;

        case is_category():
        case is_tag():
            // cannot use get_the_category() as it does not return current
            // category, but a list of categories _current_ post is attached to
            $category = get_queried_object();

            $translation_id = themifier_get_translation_id('term', $category->term_id, $slug);
            if ($translation_id) {
                if (is_category()) {
                    $url = get_category_link($translation_id);
                } elseif (is_tag()) {
                    $url = get_tag_link($translation_id);
                }
            }
            break;

        case is_object($polylang):
            $url = $polylang->links->get_translation_url($slug);
            break;
    }

    if (empty($url)) {
        // no translation found, redirect to home page in the given
        // language. Do not try to append lang url param to current
        // url, as it would result in an infinite redirection loop
        // caused by themifier_check_language()
        $url = themifier_home_url($slug);
    }

    return $url;
} // }}}

/**
 * Get translation ID of a given post or term using a Polylang module
 * (if available).
 *
 * @param  string $type
 * @param  int $id
 * @param  string $slug OPTIONAL
 * @return string|null
 */
function themifier_get_translation_id($type, $id, $slug = null) // {{{
{
    if (null === $slug) {
        $slug = themifier_get_language('slug');
    }

    switch ($type) {
        case 'post':
            if (function_exists('pll_get_post')) {
                return pll_get_post($id, $slug);
            }
            break;

        case 'term':
            if (function_exists('pll_get_term')) {
                return pll_get_term($id, $slug);
            }
            break;

        default:
            break;
    }
} // }}}

/**
 * Hook checking if the language of the current post or category matches
 * the language in the current viewing context.
 *
 * @return void
 */
function themifier_check_language() // {{{
{
    global $post;

    $lang_mismatch = false;

    if (is_category()) {
        $category = get_queried_object();
        $lang = themifier_get_term_language($category->term_id);
        if ($lang && $lang->slug != themifier_get_language('slug')) {
            $lang_mismatch = true;
        }
    }

    if (is_single()) {
        $lang = themifier_get_post_language($post->ID);
        if ($lang && $lang->slug != themifier_get_language('slug')) {
            $lang_mismatch = true;
        }
    }

    if ($lang_mismatch) {
        if (isset($_SESSION)) {
            session_write_close();
        }
        header('Location: ' .  themifier_get_translation_url());
        exit;
    }
} // }}}

// if this file is the WP execution context register plugin hooks
if (defined('ABSPATH')) {
    add_action('wp_head', 'themifier_check_language');
}
